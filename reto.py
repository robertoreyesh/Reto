# -*- coding: utf-8 -*-
"""Reto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GG8m3CqGocOsArANONXCmBd-0eGbNxZp
"""

# Essentials:
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#ignore warnings
import warnings
warnings.filterwarnings('ignore')

# t-SNE visualization
from sklearn.manifold import TSNE

# imputation
from sklearn.impute import KNNImputer

# Scaling
from sklearn.preprocessing import StandardScaler

# PCA
from sklearn.decomposition import PCA

# K-means for Clustering
from sklearn.cluster import KMeans

# elbow method
from yellowbrick.cluster import KElbowVisualizer

# cluster metrics
from sklearn.metrics import davies_bouldin_score
from sklearn.metrics import silhouette_score

# Silhouette Visualizer
from yellowbrick.cluster import SilhouetteVisualizer

df = pd.read_csv('/content/Practica.csv')
df.head()

# Usando los métodos isnull() y sum() identifica las columnas que contienen valores NaN.
print(df.isnull().sum())

# Elimina los renglones que tengan NaN usando el método dropna().
df_clean = df.dropna()
print(df_clean.isnull().sum())

# 5. Crea una hipótesis relacionada con la información financiera del dataframe. Esta hipótesis debe tener dos clusters, un cluster con una postura positiva de la hipótesis y otro cluster con una postura negativa
# Cluster positivo (0): clientes con límite de crédito alto tienden a hacer compras mas altas o comprar más.
# Cluster negativo (1): clientes con límite de crédito bajo, son mas conservadores con sus compras.

# 6. Escoge dos columnas del dataframe que soporten la hipótesis.
# 6. Crea una scatter plot con las dos columnas relacionadas.
x_col = 'CREDIT_LIMIT'
y_col = 'PURCHASES'
X = df[['CREDIT_LIMIT', 'PURCHASES']].dropna()
plt.scatter(X[x_col], X[y_col], c='blue', alpha=0.5)
plt.xlabel(x_col)
plt.ylabel(y_col)
plt.title("Relación entre límite de crédito y compras")
plt.show()

# 7. Importa K-means de scikit-learn y entrénalo con dos clusters.
kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)
kmeans.fit(X)

labels = kmeans.labels_
centroids = kmeans.cluster_centers_

# 8. Crea una scatter plot con los resultados, usando las labels del resultado para colorear los dos clusters.
# 9. Imprime las labels y los centroides del modelo de K-means
colors = ['blue', 'orange']  # Cluster 0 será azul, Cluster 1 será naranja

for cluster in range(2):
    cluster_points = X[labels == cluster]
    plt.scatter(cluster_points[x_col], cluster_points[y_col],
                c=colors[cluster], label=f'Cluster {cluster}', alpha=0.5)
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, label='Centroides')
plt.xlabel(x_col)
plt.ylabel(y_col)
plt.title("Clusters de clientes según límite de crédito y compras")
plt.legend()
plt.show()